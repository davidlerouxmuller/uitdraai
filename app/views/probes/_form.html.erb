<div style="float:right; width:50%; margin-right:5%">
  <div id="marker-msg" style="text-align: center; font-size:12px; font-weight: bold; padding:5px 0; color:gray"></div>
  <div id="map" style="width:100%; height:500px; background-color:F2F2F2"></div>
</div>


<div>
  <%= form_for(@probe) do |f| %>

      <%= f.hidden_field :field_id, :value => @field.id %>

      <label>Short Code</label>
      <%= f.text_field :name, :style => 'width:100px' %>

      <label>Elevation (m)</label>
      <%= f.text_field :elevation, :style => 'width:100px' %>

      <label>Probe Description</label>
      <%= f.text_field :description, :style => 'width:40%' %>

      <label>PROBE LONGITUDE</label>
      <%= f.text_field :longitude, :onkeyup => "update_map()",:style => '400px' %>

      <label>PROBE LATITUDE</label>
      <%= f.text_field :latitude, :onkeyup => "update_map()", :style => '400px' %>

      <div><%= f.submit "Update Probe", class: "btn-black" %></div>
  <% end %>

</div>






<script>

    var longitude;
    var latitude;

    function update_map() {
        longitude = parseFloat(document.getElementById('probe_longitude').value);
        latitude = parseFloat(document.getElementById('probe_latitude').value);
        if (latitude != 0 && latitude != 0) {
            update_marker();
            $('#marker-msg').html('Map successfully updated');

        } else {$('#marker-msg').html('Marker will be placed when both latitude and longitude is entered');}
    }


    function update_marker() {
        var polygon;
        var marker_position = {lat: latitude, lng: longitude};
        var map = new google.maps.Map(document.getElementById('map'), {
            zoom: 16,
            center: marker_position
        });
        var marker = new google.maps.Marker({
            position: marker_position,
            map: map,
        });
    }
</script>






<script>
    function initMap() {
        var polygon;
        var default_position = {lat: -26.8746024, lng: 24.6939132};
        var map = new google.maps.Map(document.getElementById('map'), {
            zoom: 5,
            center: default_position
        });


        // -- if existing data --
        <% if @probe.field && @probe.field.longitude.to_f != 0 && @probe.field.latitude.to_f != 0 %>
        var location_marker = 	{lat: <%= @probe.field.latitude %>, lng: <%= @probe.field.longitude %>};
      /* recenter map */
        map.setCenter( location_marker);
        map.zoom = 8;
      /* drop address marker */
        var marker_address = new google.maps.Marker({ position: location_marker, map: map});

        <% if @probe.field.field_polygon.to_s.length > 20 %>
        add_polygon(<%= @probe.field.latitude %>,<%= @probe.field.longitude %>);
        <% else %>
        create_polygon(<%= @probe.field.latitude %>,<%= @probe.field.longitude %>);
        <% end %>

        <% end %>

        var input = (document.getElementById('pac-input'));

        var autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo('bounds', map);

        var infowindow = new google.maps.InfoWindow();
        var marker = new google.maps.Marker({
            map: map,
            anchorPoint: new google.maps.Point(0, -29)
        });





        var input = (document.getElementById('pac-input'));

        var autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo('bounds', map);

        var infowindow = new google.maps.InfoWindow();
        var marker = new google.maps.Marker({
            map: map,
            anchorPoint: new google.maps.Point(0, -29)
        });




        autocomplete.addListener('place_changed', function() {
            infowindow.close();
            marker.setVisible(false);
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                window.alert("Autocomplete's returned place contains no geometry");
                return;
            }

            // If the place has a geometry, then present it on a map.
            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(9);  // Why 17? Because it looks good.
            }
            marker.setIcon(/** @type {google.maps.Icon} */({
                url: place.icon,
                size: new google.maps.Size(71, 71),
                origin: new google.maps.Point(0, 0),
                anchor: new google.maps.Point(17, 34),
                scaledSize: new google.maps.Size(35, 35)
            }));


            create_polygon(place.geometry.location.lat(),place.geometry.location.lng());

            document.getElementById("field_latitude").value = place.geometry.location.lat();
            document.getElementById("field_longitude").value = place.geometry.location.lng();



            //

            marker.setPosition(place.geometry.location);
            marker.setVisible(true);

            var address = '';
            if (place.address_components) {
                address = [
                    (place.address_components[0] && place.address_components[0].short_name || ''),
                    (place.address_components[1] && place.address_components[1].short_name || ''),
                    (place.address_components[2] && place.address_components[2].short_name || '')
                ].join(' ');
            }


            var street_number = "";
            var street_name = "";
            var suburb = "";
            var city = "";
            var province = "";
            var country = "";
            var code = "";
            console.log(place)
            for (var i = 0; i < place.address_components.length; i++) {
                var addressType = place.address_components[i].types[0];
                if (addressType == 'street_number') {
                    street_number = place.address_components[i].short_name;
                } else if (addressType == 'route') {
                    street_name = place.address_components[i].short_name;
                } else if (addressType == 'sublocality_level_2') {
                    suburb = place.address_components[i].short_name;
                } else if (addressType == 'locality') {
                    city = place.address_components[i].short_name;
                } else if (addressType == 'administrative_area_level_1') {
                    province = place.address_components[i].short_name;
                } else if (addressType == 'country') {
                    country = place.address_components[i].short_name;
                } else if (addressType == 'postal_code') {
                    code = place.address_components[i].short_name;
                }

            }

            //document.getElementById("destination_address_street").value = street_number + ' ' + street_name + ' ' + suburb;
            //document.getElementById("destination_address_code").value = code;
            //document.getElementById("destination_address_city").value = city;
            $('#street').html('Street : ' + street_number + ' ' + street_name + ' ' + suburb);
            $('#city').html('City : ' + city);
            $('#code').html('Code : ' + code);







        });


        function create_polygon(lat,lng) {
            console.log('set polygon');
            var polygon_path = [
                {lat: lat + 0.2, lng: lng - 0.2},
                {lat: lat + 0.2, lng: lng + 0.2},
                {lat: lat - 0.2, lng: lng + 0.2},
                {lat: lat - 0.2, lng: lng - 0.2}
            ];

            // Define a rectangle and set its editable property to true.
            polygon = new google.maps.Polygon({
                paths: polygon_path,
                editable: true,
                draggable: true,
                geodesic: true
            });
            polygon.setMap(map);

            google.maps.event.addListener(polygon.getPath(), 'set_at', function(event) {
                save_polygon();
            });

            google.maps.event.addListener(polygon.getPath(), 'insert_at', function(event) {
                save_polygon();
            });
        };

        function add_polygon() {


            var polygon_array = JSON.parse('<%= @probe.field.field_polygon.inspect.gsub('"','') %>');
            var polygon_path =[];
            for(var i=0; i<polygon_array.length; i++) {
                polygon_path.push(new google.maps.LatLng(polygon_array[i][0], polygon_array[i][1]));
                console.log(polygon_array[i][0]);
                console.log(polygon_array[i][1]);
            }

            // Define a rectangle and set its editable property to true.
            polygon = new google.maps.Polygon({
                paths: polygon_path,
                editable: true,
                draggable: true,
                geodesic: true
            });
            polygon.setMap(map);

            google.maps.event.addListener(polygon.getPath(), 'set_at', function(event) {
                save_polygon();
            });

            google.maps.event.addListener(polygon.getPath(), 'insert_at', function(event) {
                save_polygon();
            });
        };

        function save_polygon() {
            console.log('hello');

            var vertices = polygon.getPath(); // MVCArray

            var pointsArray = []; //list of polyline points
            for (var i =0; i < vertices.getLength(); i++) {
                var xy = vertices.getAt(i); //LatLang for a polyline
                var item = [xy.lat(),xy.lng()];
                console.log(xy.lat());
                console.log(xy.lng());
                pointsArray.push(item);
            }
            document.getElementById("field_field_polygon").value = JSON.stringify(pointsArray);
        };








    }









</script>
<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB3jjoMddEPVxI1Z8IboGf_UDPIS6UjJBw&libraries=places&callback=initMap"> </script>





<!-- plus and minus button for checkout -->



















